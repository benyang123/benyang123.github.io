<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[对拍程序]]></title>
    <url>%2F2019%2F03%2F20%2F%E5%AF%B9%E6%8B%8D%E7%A8%8B%E5%BA%8F%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[中国剩余定理]]></title>
    <url>%2F2019%2F03%2F19%2F%E4%B8%AD%E5%9B%BD%E5%89%A9%E4%BD%99%E5%AE%9A%E7%90%86%2F</url>
    <content type="text"><![CDATA[中国剩余定理定理内容及解法引入以一个简单经典的例子来看： 古有言今有物不知其数，三三数之剩二，五五数之剩三，七七数之剩二。问物几何？ 就是说，存在一个数x，除以3余2，除以5余3，除以7余2，然后求这个数。 首先我们可以通过列举法，枚举除以3余2的数字，5，8，11，14，17，20，23，25；同理枚举除以5余3的数字，8，13，18，23，28；接着枚举除以7余2的数字，9，16，23，30…… 通过观察得到23为最小的符合条件的整数。又3，5，7两两互质，所以lcm(3,5,7)=105，23+105n为此题的解集。 接着看看古人的解法：《孙子算经》中讲到，“三三数之剩二，置一百四十；五五数之剩三，置六十三；七七数之剩二，置三十。并之，得二百三十三，以二百十减之，即得。”“答曰：二十三。” 意思就是：$$702+213+152-105n$$n=1时即为答案23。公式中2，3，2分别为三个余数，重点考虑一下70，21，15的由来，因为70可以同时整除5和7，且模3余1，所以它乘上2就能凑够对3余2，并且乘2对5和7没有影响；21、15同理。最后能得到一个满足条件的解，解减去最小公倍数对取模没有影响，仍然符合条件，所以可以得到最小正解。 适用情况n（mod xi）=mi 一共k组限制，来构造最小的n。 解法​ 令s=s1*s2*s3*s4*…sn ​ 求r1,r2,r3...rk。 ri=s/xi ​ 求最小的a1,a2,a3...ak。需要ai(mod xi)=1 ​ 求a1*x1+a2*x2+...+ai*xi,并减去ns，使结果为最小正整数 其中第三步可以枚举，更好的方法是扩展欧几里得（exbcd）。 例题poj1006(Biorhythms) 传送门：http://poj.org/problem?id=1006 problemSome people believe that there are three cycles in a person’s life that start the day he or she is born. These three cycles are the physical, emotional, and intellectual cycles, and they have periods of lengths 23, 28, and 33 days, respectively. There is one peak in each period of a cycle. At the peak of a cycle, a person performs at his or her best in the corresponding field (physical, emotional or mental). For example, if it is the mental curve, thought processes will be sharper and concentration will be easier. Since the three cycles have different periods, the peaks of the three cycles generally occur at different times. We would like to determine when a triple peak occurs (the peaks of all three cycles occur in the same day) for any person. For each cycle, you will be given the number of days from the beginning of the current year at which one of its peaks (not necessarily the first) occurs. You will also be given a date expressed as the number of days from the beginning of the current year. You task is to determine the number of days from the given date to the next triple peak. The given date is not counted. For example, if the given date is 10 and the next triple peak occurs on day 12, the answer is 2, not 3. If a triple peak occurs on the given date, you should give the number of days to the next occurrence of a triple peak. inputYou will be given a number of cases. The input for each case consists of one line of four integers p, e, i, and d. The values p, e, and i are the number of days from the beginning of the current year at which the physical, emotional, and intellectual cycles peak, respectively. The value d is the given date and may be smaller than any of p, e, or i. All values are non-negative and at most 365, and you may assume that a triple peak will occur within 21252 days of the given date. The end of input is indicated by a line in which p = e = i = d = -1. outputFor each test case, print the case number followed by a message indicating the number of days to the next triple peak, in the form: Case 1: the next triple peak occurs in 1234 days. Use the plural form days’’ even if the answer is 1. Sample Input12345670 0 0 00 0 0 1005 20 34 3254 5 6 7283 102 23 320203 301 203 40-1 -1 -1 -1 Sample Output123456Case 1: the next triple peak occurs in 21252 days.Case 2: the next triple peak occurs in 21152 days.Case 3: the next triple peak occurs in 19575 days.Case 4: the next triple peak occurs in 16994 days.Case 5: the next triple peak occurs in 8910 days.Case 6: the next triple peak occurs in 10789 days. 大意人的体力、感情、智力出现高峰的周期为23、28、33天，分别给一个从当年开始第一次出现高峰的天数p、e、i（不一定是第一次出现高峰），再给一个从当年开始的时间d，问下一个三个高峰相交的天数距这个时间的间隔。 思路（n+d)%23=p、（n+d)%28=e、（n+d)%33=i 然后裸的中国剩余定理就好了，注意间隔为0时输出lcm就好。 代码12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;algorithm&gt;#include &lt;iostream&gt;#include &lt;cmath&gt;using namespace std;#define maxn 4int xx[maxn];//modint mm[maxn];//余数int rr[maxn];int aa[maxn];int y;void exgcd(int a,int b,int &amp;x,int &amp;y)&#123; if(b==0)&#123; x=1; y=0; &#125; else&#123; exgcd(b,a%b,y,x); y-=(a/b)*x; &#125;&#125;int main()&#123; int p,e,i,d; int re; int Case=1; while(cin&gt;&gt;p&gt;&gt;e&gt;&gt;i&gt;&gt;d)&#123; if(p==-1&amp;&amp;e==-1&amp;&amp;i==-1&amp;&amp;d==-1)&#123; break; &#125; re=0; mm[1]=p,mm[2]=e,mm[3]=i; xx[1]=23,xx[2]=28,xx[3]=33; int s=1; for(int i=1;i&lt;=3;i++)&#123; s*=xx[i]; &#125; for(int i=1;i&lt;=3;i++)&#123; rr[i]=s/xx[i]; exgcd(rr[i],xx[i],aa[i],y); aa[i]=(aa[i]%xx[i]+xx[i])%xx[i]; &#125; re=((aa[1]*mm[1]*rr[1]+aa[2]*mm[2]*rr[2]+aa[3]*mm[3]*rr[3]-d)%s+s)%s; if(re==0) re=s; cout&lt;&lt;&quot;Case &quot;&lt;&lt;Case&lt;&lt;&quot;: the next triple peak occurs in &quot;&lt;&lt;re&lt;&lt;&quot; days.&quot;&lt;&lt;endl; Case++; &#125; return 0;&#125;]]></content>
      <categories>
        <category>ACM</category>
      </categories>
      <tags>
        <tag>数论</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[环信sdk_试用]]></title>
    <url>%2F2018%2F12%2F08%2F%E7%8E%AF%E4%BF%A1sdk%2F</url>
    <content type="text"><![CDATA[环信sdk开发doc 文件夹：SDK 相关 API 文档 examples 文件夹：ChatDemoUI3.0（Demo,依赖 EaseUI 库）、EaseUI libs.av 文件夹：包含IM和实时音视频功能所需要的 jar 和 so 文件 libs.lite 文件夹：无实时语音、实时视频功能的 SDK 包，如果项目中只用到聊天功能，可以把项目里的 jar 和 so 文件替换成此文件夹里的文件 tools：方便环信2.0升级环信3.0 一些坑： 配置时sdk最低版本 v4/v8兼容问题 module中 wedget/presenter/EaseImageView中不能识别变量，报错。 改为： 12int saveFlags = Canvas.ALL_SAVE_FLAG;canvas.saveLayer(0, 0, width, height, null, saveFlags);]]></content>
      <categories>
        <category>android</category>
      </categories>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[18-扇贝杯]]></title>
    <url>%2F2018%2F11%2F18%2F18-19%E6%89%87%E8%B4%9D%E6%9D%AF%2F</url>
    <content type="text"><![CDATA[第一次参加扇贝杯，有点儿小激动其实，去年专业里就有同学参加扇贝杯了，也都拿了奖，之后我就决定开始练练算法，报一下明年的扇贝杯。 6月进了校队，大概练了整整3个月吧，结果就是基本数据结构从生疏到熟练，掌握stl，能做简单的贪心和动态规 划，能根据范围判断大概的时间复杂度，类似图论、树等等acm算法有所了解，知道大概原理，能百度做题… 虽然之前没有参加过，但还是奔着一去的，毕竟一等奖有15个，也不是没有机会，再不济二还是有的吧。 话虽然这么说，其实还是很紧张的，万一爆0（没做出任意一道题），也不是没有可能。 比赛前一晚忽然说c++环境为Dev-c，赶紧下载了一个，从网上随便拉了一个题试了试，只能说ui太复古，用不习惯，高亮也看着不舒服。 带着薛神的毒奶，进考场了。 ps 一直在思考学校最贵的饭是啥，平时觉得都不便宜，要找最贵的还真想不到… 现场还是蛮紧张的，赛前没事做就测试了一下环境，拿cb敲了一个gcd，然后又拿eclipse写了个大数，其实是第一次用eclipse.. 因为是”oi“赛制，所以没怎么记数据范围（可以水分），就大概记录一下过程，之后等放出题好好写个题解。 A：水题，一个数字n，输入1-n中不相同的n-1个数字，输出没出现的那个数字。大概估了下范围，用个哈希表记录一下，扫一次就ok了。因为进系统的姿势不对，浪费了几分钟，榜上找不到自己… B：贪心题，n个航班，第i个航班会在第i分钟起飞，每个航班对应一个c，含义为投诉量，现在由于某些原因，飞机在前k分钟不能起飞，只能在第k+1分钟到第k+n分钟起飞，而且第i个飞机实际起飞的时间不大于i，对每个航班，延误m分钟，就会有c*m个投诉，求投诉总量最小值。 策略很快就想出来了，对每分钟，取没起飞的，实际起飞时间小于等于这分钟的投诉量最大的航班，投诉量相同，取哪个都没影响，struct存每个航班的信息，大概算了一下时间复杂度不够，但应该可以拿部分分。 然后wa….了半个小时，至少你给个P…A啊，调了半个小时，没调出来，心态小炸。 C：大概扫一眼，没看错的话是计算几何，溜了。 D：给一个字符串，然后这个字符串按金字塔形状循环排，第一行1，第二行3，第三行5，k次询问，问第i行某个字母的出现次数。 看到10^18就知道ac无缘了，算一下没一行索引公式，直接计数，wa…了半个小时，同样没给P..A，心态炸了，时间过去将近1个多小时，我刷了下榜，找了3、4页，没发现自己的名字，我知道这次不可能有奖了。 E：多组字符串排序，根据自己输入的字母序排，不考虑大小写，如果相同保持原序。 可能因为B、D无限wa的原因吧，读完题感觉不难，但就是没有一点思路，过。 看到G拿分的人不少，跳了F。 G：给一个m*n的乘法表，输出第k大的数。 直接暴力，把m*n个数存到vector中，sort一下就好。然后又wa啦啦啦啦啦，调了一个小时没出来，刷个榜怀疑人生，排名100+/270+，还有好多没来比赛的… 分界线 —————— 话说不断提交还是有用的，后来瞎jb把锅甩给数据范围，把long long改成int，交了一发，给了20分好像，忽然顿悟。把所有I64d改成lld，连交三题，分别拿了40，60，50，瞬间250分，排名到了第一页，那个感觉真的爽。 然后马上封榜了（看不到提交记录+排名+提交结果），以最后一次提交为准，导致拿到部分分数的题不敢继续做嘤嘤嘤。 开始写E，感觉思路和心态是有关系的，忽然发现不就是一个重写sort吗，然后过了样例，自己hack了自己两发，交了，因为封榜前好多人拿了100，求个AC。 然后看没看过的题，F，求n个数的最大不可表说，计算几何，推了半天没推出来，只发现gcd为1，她们的最大不可表数为无穷，输出-1，骗个分。 G、H、J没有思路，正好也结束了.. 最后看排名的时候寄希望于E的100，结果只过了两个点，F给了5分（给分很人性化了）。 薛神并列第二，420分，tql。 自己拿到了预期的二，距离一还差一口气， 一点经验：赛后才知道有FAQ，想想自己太年轻了。 类蓝桥杯的比赛尽量在封榜前做完，1A确实困难。 计算几何也可以尝试，C也有好多人拿分。 会抽空补下题，尽量写一个题解。]]></content>
      <categories>
        <category>oi比赛</category>
      </categories>
      <tags>
        <tag>吹水</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[android——exp]]></title>
    <url>%2F2018%2F11%2F07%2Frxjava%2F</url>
    <content type="text"><![CDATA[RxjavaRxJava是一种基于观察者模式的响应式编程框架，其中的主要角色有： Observable 是RxJava描述的事件流 fragment.javasetArguments(Bundle args) 作用：增加fragment构造函数（传参）时的多样性。 fragment重新构建，会调用默认的构造函数。 DiaryEditFragment： （bufferKnife黄油刀） 为view绑定字段和方法 DiaryEditFragment构造函数(bundle) @override createPresenter() setContentViewId() initView(){ RxView.clicks()调用clicks方法返回一个Observable对象，每当点击这个View的时候，该Observable对象就会发射一个事件，随即调用onNext()方法， } DiaryEditPresenter.java super(activity); save(dairyID,dairyEntity,tags){} //Presenter层持有View层对象的引用 DiaryEditContract.java saveDone()–interface save()–interface glide 图片加载框架 Glide.with(this).load(url).into(imageView); Rxbus 组件之间的通信 View类中的inflate方法内部包裹了LayoutInflater类的inflate方法，这个方法是一个静态方法，不需要创建View类的对象，直接使用View类名调用（布局填充？） LayoutInflater类的作用是，将xml布局文件实例化为它对应的View对象。这个类不能直接使用，也就是不能直接调用其中的成员。一般，我们通过getLayoutInflater()方法或者 getSystemService(String) xml文件在创建阶段的前处理过程严重影响View对象填充阶段的性能（进而影响整体软件的性能），这是因为inflate方法内部使用的pull解析，若是xml文件在进行填充之前已经被xml解析了，那么inflate方法在使用时就非常轻松，否则会非常困难。因此，我们不会使用LayoutInflater类处理普通的xml文件，而是用来处理已经编译的xml文件，例如R.··········，这样的xml文件会返回一个已经解析了xml文件的pull解析器，而普通的xml文件返回的解析器则不然。 public View inflate (int resource, ViewGroup root, boolean attachToRoot)第一个参数，就是我们要填充的xml文件 第二个参数，这个要和第三个参数有关系，大家慢慢看。若是第三个参数为true，那么第二个参数的意义是，从第一个参数填充成的view对象的父控件；若是第三个参数为false，那么第二个参数的意义是， 可以为第一个参数生成的view对象的根布局提供一系LayoutParams参数的控件。 第三个参数，从第一个参数填充成的view对象是否要附着到第二个参数指定的空间上作为子控件。 说明：第一个参数不需多说，我们一般就从resource目录下找到我们要填充的布局文件即可，切不可用普通的xml文件进行填充，除非我们自己做好了相应的xmlpullparser。 若第二个参数为null，也就是我们不指定父控件，那么新生产的view对象的根布局的某些参数会失效，比如Layout_width和Layout_height会失效，这个大家可以做实验尝试，无论第三个参数是什么。 返回：若提供了root，且第三个参数为true，则返回root作为根布局，否则，返回填充出的view对象的根布局作为根布局。]]></content>
      <categories>
        <category>Rxjava</category>
      </categories>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[loginUI]]></title>
    <url>%2F2018%2F10%2F17%2FqqUI-0%2F</url>
    <content type="text"><![CDATA[Login_ui来自一个钢铁直男的ui。感觉android的layout和前端的html&amp;css一模一样，或许是因为移动端屏幕小的缘故吧，感觉比前端简单一些。 过程也很顺利。]]></content>
      <categories>
        <category>android</category>
      </categories>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[徐州网络赛 2018 G]]></title>
    <url>%2F2018%2F09%2F20%2F%E5%BE%90%E5%B7%9E%E7%BD%91%E7%BB%9C%E8%B5%9BG%2F</url>
    <content type="text"><![CDATA[Trace传送门：https://nanti.jisuanke.com/t/31459 problemThere’s a beach in the first quadrant. And from time to time, there are sea waves. A wave ( xx , yy ) means the wave is a rectangle whose vertexes are ( 00 , 00 ), ( xx , 00 ), ( 00 , yy ), ( xx , yy ). Every time the wave will wash out the trace of former wave in its range and remain its own trace of ( xx , 00 ) -&gt; ( xx , yy ) and ( 00 , yy ) -&gt; ( xx , yy ). Now the toad on the coast wants to know the total length of trace on the coast after n waves. It’s guaranteed that a wave will not cover the other completely. inputThe first line is the number of waves n(n \le 50000)n(n≤50000). The next nn lines，each contains two numbers xx yy ,( 0 &lt; x0&lt;x , y \le 10000000y≤10000000 )，the ii-th line means the ii-th second there comes a wave of ( xx , yy ), it’s guaranteed that when 1 \le i1≤i , j \le nj≤n ，x_i \le x_jxi≤xj and y_i \le y_jyi≤yj don’t set up at the same time. outputAn Integer stands for the answer. hintAs for the sample input, the answer is 3+3+1+1+1+1=103+3+1+1+1+1=10 sample input123431 44 13 3 sample output110 大意：依次输入n个矩形，后输入的会遮挡之前输入的矩形，并且没有一个矩形可以完全覆盖另一个矩形，求最后所有矩形轮廓长度和。 思路：脑补一下过程，大概就是分x方向与y方向分别讨论，注意没有一个矩形可以完全覆盖另一个矩形，所以每次只要加上与被覆盖的最大的矩形的差值就好，注意从后往前扫。 12345678910111213141516171819202122232425262728293031323334353637#include &lt;cstdio&gt;#include &lt;set&gt;#include &lt;algorithm&gt;using namespace std;typedef long long ll;#define maxn 50001set&lt;int&gt; st;set&lt;int&gt; st2;int a[maxn];int b[maxn];ll ans1;ll ans2;int main()&#123; int n; scanf("%d",&amp;n); for(int i=1;i&lt;=n;i++)&#123; scanf("%d",&amp;a[i]); scanf("%d",&amp;b[i]); &#125; ans1=0; ans2=0; st.insert(0); st2.insert(0); for(int i=n;i&gt;=1;i--)&#123; ans1+=a[i]-*(--lower_bound(st.begin(),st.end(),a[i])); st.insert(a[i]); ans2+=b[i]-*(--lower_bound(st2.begin(),st2.end(),b[i])); st2.insert(b[i]); &#125; printf("%lld\n",ans1+ans2); return 0;&#125; 比赛中好多队都A了，不知道为何比赛中后期队里思维都比较迟钝，可能还是打的少吧。]]></content>
      <categories>
        <category>ACM</category>
      </categories>
      <tags>
        <tag>map</tag>
        <tag>二分</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World!]]></title>
    <url>%2F2018%2F09%2F03%2FHello-World!%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
      <categories>
        <category>Hello world</category>
      </categories>
      <tags>
        <tag>Hello world</tag>
      </tags>
  </entry>
</search>
